import pickle
import urllib
from shutil import copyfile
from lxml import etree
from lxml import objectify
from io import BytesIO
import os.path
import errno
import os
import pprint
import dpath.util
import hashlib
import re
import sys
from mvn_utils import read_remote_file
from mvn_utils import sha1
from maven_package import MavenPackage


buck_file = os.getcwd() + '/maven/BUCK'
buck_file_py = os.getcwd() + '/maven/buck.py'

mvn_pkg_str = """
maven_package(
    repository = '{0}',
    name = '{1}',
    package = '{2}',
    type = '{4}',
    deps = [
{3}    ]
)
"""

default_content = """
# THIS FILE HAS BEEN GENERATED AUTOMATICALLY
# DO NOT EDIT THIS FILE MANUALLY
# To regenerate just type `python mvn regenerate`
# To add a maven package type
# > python mvn package add groupId:artifactId:versionId
"""

sys.path.insert(0, os.getcwd() + '/maven/')
packages = []
def parse_buck_file():
    global packages
    content = open(buck_file, 'r').read()

    lf = open(buck_file_py, 'w')
    lf.write('from mock import maven_package\n'+content)
    lf.close()

    import buck
    from mock import get_packages

    packages = get_packages()


def write_buck_file():
    global packages
    content = default_content

    for package in packages:
        if package.repository == 'local:':
            continue
        deps = package.get_flat_dependencies(0)
        deps_str = ''
        for dep in deps:
            if dep != package.identifier.normalized_id:
                deps_str += '        \'{0}\',\n'.format(dep)
        content += mvn_pkg_str.format(package.repository,
                    package.identifier.normalized_id,
                    package.identifier.id,
                    deps_str,
                    package.type)
    lf = open(buck_file, 'w')
    lf.write(content)
    lf.close()


def add_package(pkg, repo, no_cache, type='primary'):

    print 'Adding {0} from {1} with{2} cache...'.format(pkg, repo,
        'out' if no_cache else '')


    print '\033[2m'
    package = MavenPackage(package = pkg,
                            repository = repo or 'http://repo1.maven.org/maven2/',
                            type=type)
    package.display_tree()

    print '\033[0m'

    deps = package.get_flat_dependencies(1)
    # ndeps = package.get_flat_dependencies(0)

    for p in packages:
        if p.identifier.normalized_id == package.identifier.normalized_id:
            print 'Package already added.'
            return
    for dep in deps:
        if dep != pkg:
            add_package(dep, repo, no_cache, 'secondary')
    packages.append(package)



help = """Simple utility to add new maven repos and cache them to cache

Usage:
    mvn package add <package> [--no-cache] [--repo=<repo>]
    mvn -h | --help
    mvn cache (clean|rebuild|build)

Options:
    --repo=<repo>       Specify the repository URL
    --no-cache          Do not use cache
    --help -h           Show this screen
"""
parse_buck_file()
from docopt import docopt

arguments = docopt(help)



if arguments.get('package', False):
    if arguments.get('add', False):
        add_package(arguments.get('<package>'),
            arguments.get('<repo>', 'http://repo1.maven.org/maven2/'),
            arguments.get('--no-cache', False))
        write_buck_file()
if arguments.get('repository', False):
    if arguments.get('add', False):
        print arguments.get('<url>')
        add_repo(arguments.get('<url>'))
